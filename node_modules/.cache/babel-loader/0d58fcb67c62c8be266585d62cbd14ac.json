{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/workspace/volt-pro-react-v1.0.0/src/pages/plugins/Calendar.js\";\nimport React from 'react';\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\nimport { Col, Row, Form, Card, Modal, Button, InputGroup, Container } from '@themesberg/react-bootstrap';\nimport Datetime from \"react-datetime\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport Code from \"../../components/Code\";\nimport Documentation from \"../../components/Documentation\";\nimport entries from \"../../data/events\";\nexport default (() => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"px-0\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        xs: 12,\n        className: \"p-3\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"h2\",\n              id: \"calendar\",\n              children: \"Calendar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"fs-5 fw-light\",\n              children: [\"Volt React has an advanced integration of \", /*#__PURE__*/_jsxDEV(Card.Link, {\n                href: \"https://fullcalendar.io/docs/react\",\n                target: \"_blank\",\n                children: \"FullCalendar\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 59\n              }, this), \" to show, edit and delete events.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"fs-5\",\n              children: \"Getting started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"The first step is to install the FullCalendar related dependencies. You\\u2019ll need the React adapter and any additional plugins you plan to use (the full list can be found \", /*#__PURE__*/_jsxDEV(Card.Link, {\n                href: \"https://fullcalendar.io/docs/plugin-index\",\n                target: \"_blank\",\n                children: \"here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 186\n              }, this), \"):\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Code, {\n              code: \"$ npm install --save @fullcalendar/react @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/bootstrap @fullcalendar/interaction\",\n              language: \"bash\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Documentation, {\n              title: \"Example\",\n              description: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Here\\u2019s an example of a calendar that combines two great libraries FullCalendar and SweetAlert:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this),\n              imports: `import { Col, Row, Form, Modal, Button, InputGroup } from \"@themesberg/react-bootstrap\";\nimport Datetime from \"react-datetime\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";`,\n              scope: {\n                Col,\n                Row,\n                Form,\n                Modal,\n                Button,\n                InputGroup,\n                entries,\n                Date,\n                moment,\n                FullCalendar,\n                dayGridPlugin,\n                timeGridPlugin,\n                bootstrapPlugin,\n                interactionPlugin,\n                Datetime,\n                Swal,\n                withReactContent,\n                FontAwesomeIcon,\n                faCalendarAlt\n              },\n              example: `const SwalWithBootstrapButtons = withReactContent(Swal.mixin({\n  customClass: {\n    confirmButton: 'btn btn-primary me-3',\n    cancelButton: 'btn btn-gray'\n  },\n  buttonsStyling: false\n}));\n                \nconst EventModal = (props) => {\n  const [title, setTitle] = React.useState(props.title);\n  const [start, setStart] = React.useState(props.start);\n  const [end, setEnd] = React.useState(props.end);\n\n  const { show = false, edit = false, id } = props;\n  const startDate = start ? moment(start).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n  const endDate = end ? moment(end).endOf(\"day\").format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n\n  const onTitleChange = (e) => setTitle(e.target.value);\n\n  const onConfirm = () => {\n    const finalStart = moment(startDate).toDate();\n    const finalEnd = moment(endDate).toDate();\n    const payload = { id, title, start: finalStart, end: finalEnd };\n\n    if (edit) {\n      return props.onUpdate && props.onUpdate(payload);\n    }\n\n    return props.onAdd && props.onAdd(payload);\n  }\n  const onDelete = () => edit && props.onDelete && props.onDelete(id);\n  const onHide = () => props.onHide && props.onHide();\n\n  return (\n    <Modal as={Modal.Dialog} centered show={show} onHide={onHide}>\n      <Form className=\"modal-content\">\n        <Modal.Body>\n          <Form.Group id=\"title\" className=\"mb-4\">\n            <Form.Label>Event title</Form.Label>\n            <Form.Control\n              required\n              autoFocus\n              type=\"text\"\n              value={title}\n              onChange={onTitleChange} />\n          </Form.Group>\n          <Row>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"startDate\">\n                <Form.Label>Select start date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setStart}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={faCalendarAlt} />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={startDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"endDate\" className=\"mb-2\">\n                <Form.Label>Select end date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setEnd}\n                  isValidDate={currDate => currDate.isAfter(start)}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={faCalendarAlt} />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={endDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n          </Row>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"me-2\" onClick={onConfirm}>\n            {edit ? \"Update event\" : \"Add new event\"}\n          </Button>\n\n          {edit ? (\n            <Button variant=\"danger\" onClick={onDelete}>\n              Delete event\n            </Button>\n          ) : null}\n\n          <Button variant=\"link\" className=\"text-gray ms-auto\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n};\n                \nconst Calendar = () => {\n  const defaultModalProps = { id: \"\", title: \"\", start: null, end: null };\n  const [showEditModal, setShowEditModal] = React.useState(false);\n  const [showAddModal, setShowAddModal] = React.useState(false);\n  const [modalProps, setModalProps] = React.useState(defaultModalProps);\n  const [events, setEvents] = React.useState(entries);\n\n  const calendarRef = React.useRef();\n  const currentDate = moment().format(\"YYYY-MM-DD\");\n\n  const onDateClick = (props) => {\n    const { date } = props;\n    const id = events.length + 1;\n    const endDate = new Date(date).setDate(date.getDate() + 1);\n\n    setModalProps({ ...modalProps, id, start: date, end: endDate });\n    setShowAddModal(true);\n  };\n\n  const onEventClick = (props) => {\n    const { event: { id, title, start, end } } = props;\n    setModalProps({ id, title, start, end });\n    setShowEditModal(true);\n  };\n\n  const onEventUpdate = (props) => {\n    const { id, title, start, end } = props;\n    const calendarApi = calendarRef.current.getApi();\n    const calendarElem = calendarApi.getEventById(id);\n\n    if (calendarElem) {\n      calendarElem.setProp(\"title\", title);\n      calendarElem.setStart(start);\n      calendarElem.setEnd(end);\n    }\n\n    setShowEditModal(false);\n  };\n\n  const onEventAdd = (props) => {\n    const newEvent = { ...props, dragable: true, className: 'bg-blue text-white', allDay: true };\n\n    setShowAddModal(false);\n    setEvents([...events, newEvent]);\n    setModalProps(defaultModalProps);\n  };\n\n  const onEventDelete = async function(id) {\n    const result = await SwalWithBootstrapButtons.fire({\n      icon: 'error',\n      title: 'Confirm deletion',\n      text: 'Are you sure you want to delete this event?',\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: 'No, cancel!'\n    });\n\n    setShowEditModal(false);\n    setModalProps(defaultModalProps);\n\n    if (result.isConfirmed) {\n      await SwalWithBootstrapButtons.fire('Deleted!', 'The event has been deleted.', 'success');\n\n      const newEvents = events.filter(e => e.id !== parseInt(id));\n      setEvents(newEvents);\n    }\n  };\n\n  const handleClose = () => {\n    setShowAddModal(false);\n    setShowEditModal(false);\n  };\n\n  return <>\n    {showEditModal ? (\n      <EventModal\n        {...modalProps}\n        edit={true}\n        show={showEditModal}\n        onUpdate={onEventUpdate}\n        onDelete={onEventDelete}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    {showAddModal ? (\n      <EventModal\n        {...modalProps}\n        show={showAddModal}\n        onAdd={onEventAdd}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    <FullCalendar\n      editable\n      selectable\n      events={events}\n      ref={calendarRef}\n      themeSystem=\"bootstrap\"\n      initialView=\"dayGridMonth\"\n      displayEventTime={false}\n      initialDate={currentDate}\n      dateClick={onDateClick}\n      eventClick={onEventClick}\n      plugins={[dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin]}\n    />\n  </>;\n};\n\nrender( <Calendar /> );`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/workspace/volt-pro-react-v1.0.0/src/pages/plugins/Calendar.js"],"names":["React","Swal","moment","Col","Row","Form","Card","Modal","Button","InputGroup","Container","Datetime","FontAwesomeIcon","faCalendarAlt","FullCalendar","dayGridPlugin","timeGridPlugin","bootstrapPlugin","interactionPlugin","withReactContent","Code","Documentation","entries","Date"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport Swal from \"sweetalert2\";\nimport moment from \"moment-timezone\";\nimport { Col, Row, Form, Card, Modal, Button, InputGroup, Container } from '@themesberg/react-bootstrap';\nimport Datetime from \"react-datetime\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";\n\nimport Code from \"../../components/Code\";\nimport Documentation from \"../../components/Documentation\";\nimport entries from \"../../data/events\";\n\n\nexport default () => {\n\n  return (\n    <Container className=\"px-0\">\n      <Row>\n        <Col xs={12} className=\"p-3\">\n          <Card>\n            <Card.Body>\n              <h1 className=\"h2\" id=\"calendar\">Calendar</h1>\n              <p className=\"fs-5 fw-light\">\n                Volt React has an advanced integration of <Card.Link href=\"https://fullcalendar.io/docs/react\" target=\"_blank\">FullCalendar</Card.Link> to show, edit and delete events.\n              </p>\n\n              <h2 className=\"fs-5\">Getting started</h2>\n              <p>\n                The first step is to install the FullCalendar related dependencies. You’ll need the React adapter and any additional plugins you plan to use (the full list can be found <Card.Link href=\"https://fullcalendar.io/docs/plugin-index\" target=\"_blank\">here</Card.Link>):\n              </p>\n              <Code code=\"$ npm install --save @fullcalendar/react @fullcalendar/daygrid @fullcalendar/timegrid @fullcalendar/bootstrap @fullcalendar/interaction\" language=\"bash\" />\n\n              <Documentation\n                title=\"Example\"\n                description={\n                  <p>Here’s an example of a calendar that combines two great libraries FullCalendar and SweetAlert:</p>\n                }\n                imports={`import { Col, Row, Form, Modal, Button, InputGroup } from \"@themesberg/react-bootstrap\";\nimport Datetime from \"react-datetime\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendarAlt } from \"@fortawesome/free-solid-svg-icons\";\nimport FullCalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport bootstrapPlugin from \"@fullcalendar/bootstrap\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport withReactContent from \"sweetalert2-react-content\";`}\n                scope={{ Col, Row, Form, Modal, Button, InputGroup, entries, Date, moment, FullCalendar, dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin, Datetime, Swal, withReactContent, FontAwesomeIcon, faCalendarAlt }}\n                example={`const SwalWithBootstrapButtons = withReactContent(Swal.mixin({\n  customClass: {\n    confirmButton: 'btn btn-primary me-3',\n    cancelButton: 'btn btn-gray'\n  },\n  buttonsStyling: false\n}));\n                \nconst EventModal = (props) => {\n  const [title, setTitle] = React.useState(props.title);\n  const [start, setStart] = React.useState(props.start);\n  const [end, setEnd] = React.useState(props.end);\n\n  const { show = false, edit = false, id } = props;\n  const startDate = start ? moment(start).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n  const endDate = end ? moment(end).endOf(\"day\").format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\");\n\n  const onTitleChange = (e) => setTitle(e.target.value);\n\n  const onConfirm = () => {\n    const finalStart = moment(startDate).toDate();\n    const finalEnd = moment(endDate).toDate();\n    const payload = { id, title, start: finalStart, end: finalEnd };\n\n    if (edit) {\n      return props.onUpdate && props.onUpdate(payload);\n    }\n\n    return props.onAdd && props.onAdd(payload);\n  }\n  const onDelete = () => edit && props.onDelete && props.onDelete(id);\n  const onHide = () => props.onHide && props.onHide();\n\n  return (\n    <Modal as={Modal.Dialog} centered show={show} onHide={onHide}>\n      <Form className=\"modal-content\">\n        <Modal.Body>\n          <Form.Group id=\"title\" className=\"mb-4\">\n            <Form.Label>Event title</Form.Label>\n            <Form.Control\n              required\n              autoFocus\n              type=\"text\"\n              value={title}\n              onChange={onTitleChange} />\n          </Form.Group>\n          <Row>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"startDate\">\n                <Form.Label>Select start date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setStart}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={faCalendarAlt} />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={startDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n            <Col xs={12} lg={6}>\n              <Form.Group id=\"endDate\" className=\"mb-2\">\n                <Form.Label>Select end date</Form.Label>\n                <Datetime\n                  timeFormat={false}\n                  onChange={setEnd}\n                  isValidDate={currDate => currDate.isAfter(start)}\n                  renderInput={(props, openCalendar) => (\n                    <InputGroup>\n                      <InputGroup.Text>\n                        <FontAwesomeIcon icon={faCalendarAlt} />\n                      </InputGroup.Text>\n                      <Form.Control\n                        required\n                        type=\"text\"\n                        placeholder=\"YYYY-MM-DD\"\n                        value={endDate}\n                        onFocus={openCalendar}\n                        onChange={() => { }} />\n                    </InputGroup>\n                  )} />\n              </Form.Group>\n            </Col>\n          </Row>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" className=\"me-2\" onClick={onConfirm}>\n            {edit ? \"Update event\" : \"Add new event\"}\n          </Button>\n\n          {edit ? (\n            <Button variant=\"danger\" onClick={onDelete}>\n              Delete event\n            </Button>\n          ) : null}\n\n          <Button variant=\"link\" className=\"text-gray ms-auto\" onClick={onHide}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal>\n  );\n};\n                \nconst Calendar = () => {\n  const defaultModalProps = { id: \"\", title: \"\", start: null, end: null };\n  const [showEditModal, setShowEditModal] = React.useState(false);\n  const [showAddModal, setShowAddModal] = React.useState(false);\n  const [modalProps, setModalProps] = React.useState(defaultModalProps);\n  const [events, setEvents] = React.useState(entries);\n\n  const calendarRef = React.useRef();\n  const currentDate = moment().format(\"YYYY-MM-DD\");\n\n  const onDateClick = (props) => {\n    const { date } = props;\n    const id = events.length + 1;\n    const endDate = new Date(date).setDate(date.getDate() + 1);\n\n    setModalProps({ ...modalProps, id, start: date, end: endDate });\n    setShowAddModal(true);\n  };\n\n  const onEventClick = (props) => {\n    const { event: { id, title, start, end } } = props;\n    setModalProps({ id, title, start, end });\n    setShowEditModal(true);\n  };\n\n  const onEventUpdate = (props) => {\n    const { id, title, start, end } = props;\n    const calendarApi = calendarRef.current.getApi();\n    const calendarElem = calendarApi.getEventById(id);\n\n    if (calendarElem) {\n      calendarElem.setProp(\"title\", title);\n      calendarElem.setStart(start);\n      calendarElem.setEnd(end);\n    }\n\n    setShowEditModal(false);\n  };\n\n  const onEventAdd = (props) => {\n    const newEvent = { ...props, dragable: true, className: 'bg-blue text-white', allDay: true };\n\n    setShowAddModal(false);\n    setEvents([...events, newEvent]);\n    setModalProps(defaultModalProps);\n  };\n\n  const onEventDelete = async function(id) {\n    const result = await SwalWithBootstrapButtons.fire({\n      icon: 'error',\n      title: 'Confirm deletion',\n      text: 'Are you sure you want to delete this event?',\n      showCancelButton: true,\n      confirmButtonText: \"Yes, delete it!\",\n      cancelButtonText: 'No, cancel!'\n    });\n\n    setShowEditModal(false);\n    setModalProps(defaultModalProps);\n\n    if (result.isConfirmed) {\n      await SwalWithBootstrapButtons.fire('Deleted!', 'The event has been deleted.', 'success');\n\n      const newEvents = events.filter(e => e.id !== parseInt(id));\n      setEvents(newEvents);\n    }\n  };\n\n  const handleClose = () => {\n    setShowAddModal(false);\n    setShowEditModal(false);\n  };\n\n  return <>\n    {showEditModal ? (\n      <EventModal\n        {...modalProps}\n        edit={true}\n        show={showEditModal}\n        onUpdate={onEventUpdate}\n        onDelete={onEventDelete}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    {showAddModal ? (\n      <EventModal\n        {...modalProps}\n        show={showAddModal}\n        onAdd={onEventAdd}\n        onHide={handleClose}\n      />\n    ) : null}\n\n    <FullCalendar\n      editable\n      selectable\n      events={events}\n      ref={calendarRef}\n      themeSystem=\"bootstrap\"\n      initialView=\"dayGridMonth\"\n      displayEventTime={false}\n      initialDate={currentDate}\n      dateClick={onDateClick}\n      eventClick={onEventClick}\n      plugins={[dayGridPlugin, timeGridPlugin, bootstrapPlugin, interactionPlugin]}\n    />\n  </>;\n};\n\nrender( <Calendar /> );`}\n              />\n\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}